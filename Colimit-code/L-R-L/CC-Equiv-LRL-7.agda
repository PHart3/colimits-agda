{-# OPTIONS --without-K --rewriting  #-}

open import lib.Basics
open import lib.types.Pushout
open import lib.types.Span
open import Coslice
open import Diagram
open import FTID-Cos
open import lib.types.Colim
open import CC-Equiv-LRL-0
open import CC-Equiv-LRL-5
open import CC-Equiv-LRL-6

module CC-Equiv-LRL-7 where

module _ {‚Ñìv ‚Ñìe ‚Ñì ‚Ñìd ‚Ñìc} {Œì : Graph ‚Ñìv ‚Ñìe} {A : Type ‚Ñì} (F : CosDiag ‚Ñìd ‚Ñì A Œì) (T : Coslice ‚Ñìc ‚Ñì A) where

  open Constr F T

  module _ (f : P ‚Üí ty T) (f‚Çö : (a : A) ‚Üí f (left a) == fun T a) where

    RLfunEqFun : f ‚àº fst (RLfun (f , f‚Çö))
    RLfunEqFun =
      PushoutMapEq f (fst (RLfun (f , f‚Çö))) f‚Çö (RfunEq (f , f‚Çö))
      (colimE (Œª i a ‚Üí ‚ÜØ (Constr6.ùï£ F T (f , f‚Çö) i a))
        (Œª i j g a ‚Üí
          from-transp-g (Œª z ‚Üí (! (ap f (glue z)) ‚àô f‚Çö ([id] z)) ‚àô ap (fst (RLfun (f , f‚Çö))) (glue z)
            ==
          RfunEq (f , f‚Çö) (œà z)) (cglue g a) (=‚Çõ-out (Constr7.DiagCoher7.RLfunHtpy F T i j f f‚Çö g a))))

    RLfunEqBP : (a : A) ‚Üí ! (RLfunEqFun (left a)) ‚àô f‚Çö a == idp
    RLfunEqBP a = !-inv-l (f‚Çö a)

    RLfun-‚àº : [ A , Cos P left ] (f , f‚Çö) ‚àº RLfun (f , f‚Çö)
    fst RLfun-‚àº = RLfunEqFun
    snd RLfun-‚àº = RLfunEqBP

    RLfunEq : (f , f‚Çö) == RLfun (f , f‚Çö)
    RLfunEq = PtFunEq (f , f‚Çö) RLfun-‚àº

    
