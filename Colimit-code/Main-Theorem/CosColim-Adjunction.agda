{-# OPTIONS --without-K --rewriting  #-}

open import lib.Basics
open import lib.types.Pushout
open import Coslice
open import Diagram-Cos
open import Cocone-po
open import CC-Equiv-LRL-7
open import CC-Equiv-RLR-4
open import CosColimitMap00
open import CosColimitMap18
open import CosColimitPstCmp
open import CosColimitPreCmp-def
open import CosColimitPreCmp

module CosColim-Adjunction where

{-
  Our pushout construction's action on maps fits into the two naturality
  squares satisfied by the left adjoint to the constant diagram functor.
-}

module _ {‚Ñìv ‚Ñìe ‚Ñì} {Œì : Graph ‚Ñìv ‚Ñìe} {A : Type ‚Ñì} where

  open MapsCos A

  open Id Œì A

  open Maps

  -- the first naturality square, arising from post-composition with the coslice map

  AdjSq-PostCmp : ‚àÄ {‚Ñìd ‚Ñìc‚ÇÅ ‚Ñìc‚ÇÇ} (F : CosDiag ‚Ñìd ‚Ñì A Œì) {T : Coslice ‚Ñìc‚ÇÅ ‚Ñì A} {U : Coslice ‚Ñìc‚ÇÇ ‚Ñì A}
    (œÜ : T *‚Üí U) (f* : (Cos (P F) left) *‚Üí T)
    ‚Üí Map-to-Lim-map F œÜ (PostComp-cos (ColCoC-cos F) f*) == PostComp-cos (ColCoC-cos F) (œÜ ‚àò* f*)
  AdjSq-PostCmp F œÜ (f , f‚Çö) = CosColim-NatSq1-eq F œÜ f f‚Çö 

  -- the second naturality square, arising from pre-composition with the diagram map

  module _ {‚ÑìF ‚ÑìG} {F : CosDiag ‚ÑìF ‚Ñì A Œì} {G : CosDiag ‚ÑìG ‚Ñì A Œì} (Œ¥ : CosDiagMor A F G) where

    open ConstrMap Œ¥  -- gives us the map ùïï, the action of colimits on Œ¥

    CosCol-po-act : (Cos P‚ÇÅ left) *‚Üí (Cos P‚ÇÇ left)
    CosCol-po-act = ùïï

    open ConstrMap19 Œ¥

    AdjSq-PreCmp : ‚àÄ {‚Ñìc} {T : Coslice ‚Ñìc ‚Ñì A} (f* : (Cos P‚ÇÇ left) *‚Üí T)
      ‚Üí Diag-to-Lim-map Œ¥ (PostComp-cos (ColCoC-cos G) f*) == PostComp-cos (ColCoC-cos F) (f* ‚àò* CosCol-po-act)
    AdjSq-PreCmp f* = NatSq-PreCmp Œ¥ f*
