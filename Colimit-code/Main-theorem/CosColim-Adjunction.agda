{-# OPTIONS --without-K --rewriting  #-}

open import lib.Basics
open import lib.types.Pushout
open import lib.types.Span
open import Coslice
open import Diagram
open import Cocone
open import CosColimitEquiv
open import CosColimitEquiv2Cont4
open import CosColimitMap
open import CosColimitMap23
open import CosColimitPstCmp
open import CosColimitPreCmp

module CosColim-Adjunction where

{-

  This file contains our final proof, which shows that our pushout
  construction satisfies the universal property of an A-colimit,
  namely that it's left adjoint to the constant diagram functor.
  We construct such an adjunction by presenting the expected
  natural isomorphism.

-}

module _ {‚Ñìv ‚Ñìe ‚Ñì} {Œì : Graph ‚Ñìv ‚Ñìe} {A : Type ‚Ñì} where

  open MapsCos A

  open Id Œì A

  open Maps

-- The isomorphism itself

  Colim-Iso : ‚àÄ {‚Ñìd ‚Ñìc} (F : CosDiag ‚Ñìd ‚Ñì A Œì) (T : Coslice ‚Ñìc ‚Ñì A) ‚Üí is-equiv (PostComp {D = T} (ColCoC F))
  Colim-Iso F T = is-eq (PostComp {D = T} (ColCoC F)) (Recc.recCosCoc F T) (Œª K ‚Üí LRfunEq K) Œª (f , f‚Çö) ‚Üí ! (RLfunEq F T f f‚Çö)

-- The first naturality square, arising from post-composition with coslice map

  Iso-Nat-PostCmp : ‚àÄ {‚Ñìd ‚Ñìc‚ÇÅ ‚Ñìc‚ÇÇ} (F : CosDiag ‚Ñìd ‚Ñì A Œì) {T : Coslice ‚Ñìc‚ÇÅ ‚Ñì A} {U : Coslice ‚Ñìc‚ÇÇ ‚Ñì A} (œÜ : T *‚Üí U) (f* : (Cos (P F) left) *‚Üí T)
    ‚Üí Map-to-Lim-map F œÜ (PostComp (ColCoC F) f*) == PostComp (ColCoC F) (œÜ ‚àò* f*)
  Iso-Nat-PostCmp F œÜ (f , f‚Çö) = CosColim-NatSq1-eq F œÜ f f‚Çö 

-- The second naturality square, arising from pre-composition with diagram map

  module _ {‚ÑìF ‚ÑìG} {F : CosDiag ‚ÑìF ‚Ñì A Œì} {G : CosDiag ‚ÑìG ‚Ñì A Œì} (Œ¥ : CosDiagMor A F G) where

    open ConstrMap Œ¥

    open ConstrMap23 Œ¥

    Iso-Nat-PreCmp : ‚àÄ {‚Ñìc} {T : Coslice ‚Ñìc ‚Ñì A} (f* : (Cos P‚ÇÇ left) *‚Üí T)
      ‚Üí Diag-to-Lim-map (PostComp (ColCoC G) f*) == PostComp (ColCoC F) (f* ‚àò* ùïï)
    Iso-Nat-PreCmp f* = NatSq-PreCmp Œ¥ f*
