{-# OPTIONS --without-K --rewriting  #-}

open import lib.Basics
open import lib.types.Pushout
open import Coslice
open import Diagram-Cos
open import Cocone-po
open import CC-Equiv-RLR-4
open import CosColimitMap00
open import CosColimitMap17
open import CosColimitMap18
open import CosColimitPreCmp-def
open import CosColimitPstCmp

module CosColimitPreCmp where

module _ {‚Ñìv ‚Ñìe ‚Ñì ‚ÑìF ‚ÑìG} {Œì : Graph ‚Ñìv ‚Ñìe} {A : Type ‚Ñì} {F : CosDiag ‚ÑìF ‚Ñì A Œì} {G : CosDiag ‚ÑìG ‚Ñì A Œì} (Œ¥ : CosDiagMor A F G) where

  open ConstrMap Œ¥

  open Id.Maps Œì A

  open MapsCos A

  open Recc F (Cos P‚ÇÇ left)

  open ConstrMap19 Œ¥

  module _ {‚Ñìc} {T : Coslice ‚Ñìc ‚Ñì A} where

    module _ (f : P‚ÇÇ ‚Üí ty T) (f‚Çö : (a : A) ‚Üí f (left a) == str T a) where 

      NatSq-PreCmp1 =
        Diag-to-Lim-map Œ¥ (PostComp-cos (ColCoC-cos G) (f , f‚Çö))
          =‚ü® ! (CosColim-NatSq2-eq T f f‚Çö) ‚ü©
        Map-to-Lim-map F (f , f‚Çö) CC-from-diagmap
          =‚ü® ap (Map-to-Lim-map F (f , f‚Çö)) (! (LRfunEq CC-from-diagmap)) ‚ü©
        Map-to-Lim-map F (f , f‚Çö) (PostComp-cos (ColCoC-cos F) (recCosCoc CC-from-diagmap))
          =‚ü® CosColim-NatSq1-eq F (f , f‚Çö) (fst (recCosCoc CC-from-diagmap)) (snd (recCosCoc CC-from-diagmap)) ‚ü©
        PostComp-cos (ColCoC-cos F) (f , f‚Çö ‚àò* recCosCoc CC-from-diagmap) =‚àé

      NatSq-PreCmp2 : PostComp-cos (ColCoC-cos F) (f , f‚Çö ‚àò* recCosCoc CC-from-diagmap) == PostComp-cos (ColCoC-cos F) (f , f‚Çö ‚àò* ùïï)
      NatSq-PreCmp2 = ap (Œª h ‚Üí PostComp-cos (ColCoC-cos F) (f , f‚Çö ‚àò* h)) (CC-from-diagmap-ùïï-eq Œ¥)

    NatSq-PreCmp : (f* : (Cos P‚ÇÇ left) *‚Üí T) ‚Üí Diag-to-Lim-map Œ¥ (PostComp-cos (ColCoC-cos G) f*) == PostComp-cos (ColCoC-cos F) (f* ‚àò* ùïï)
    NatSq-PreCmp (f , f‚Çö) = NatSq-PreCmp1 f f‚Çö ‚àô NatSq-PreCmp2 f f‚Çö

